                            | #######################################################################
                            | # Test for copying block of size 4;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f47002000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f20400000000000000 | 	irmovq $4, %rdx		# src and dst have 4 elements
0x014: 30f6c801000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f79001000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | # Loop header
0x032: 6300                 | 	xorq %rax,%rax		# count = 0;
0x034: c0f2feffffffffffffff |     iaddq $-2, %rdx
0x03e: 70e000000000000000   |     jmp test
0x047: 50a70000000000000000 | Loop:	mrmovq (%rdi), %r10	# read val from src...
0x051: 50b70800000000000000 |     mrmovq 8(%rdi), %r11
0x05b: 50c71000000000000000 |     mrmovq 16(%rdi), %r12
0x065: c0f71800000000000000 |     iaddq $24, %rdi
0x06f: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x071: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# ...and store it to dst
0x07b: 718e00000000000000   |     jle countAddTwo
0x084: c0f00100000000000000 |     iaddq $1, %rax
0x08e:                      | countAddTwo:
0x08e: 62bb                 |     andq %r11, %r11
0x090: 40b60800000000000000 | 	rmmovq %r11, 8(%rsi)	# ...and store it to dst
0x09a: 71ad00000000000000   |     jle countAddOne
0x0a3: c0f00100000000000000 |     iaddq $1, %rax
0x0ad:                      | countAddOne:
0x0ad: 62cc                 |     andq %r12, %r12
0x0af: 40c61000000000000000 |     rmmovq %r12, 16(%rsi)
0x0b9: 71cc00000000000000   |     jle countAddZero
0x0c2: c0f00100000000000000 |     iaddq $1, %rax
0x0cc:                      | countAddZero:
0x0cc: c0f61800000000000000 |     iaddq $24, %rsi
0x0d6: c0f2fdffffffffffffff |     iaddq $-3, %rdx
0x0e0:                      | test:
0x0e0: 764700000000000000   | 	jg Loop			# if so, goto Loop:
0x0e9: 744d01000000000000   |     jne rest 
0x0f2: 50a70000000000000000 |     mrmovq (%rdi), %r10
0x0fc: 50b70800000000000000 |     mrmovq 8(%rdi), %r11
0x106: 62aa                 |     andq %r10, %r10
0x108: 40a60000000000000000 |     rmmovq %r10, (%rsi)
0x112: 712501000000000000   |     jle testr11
0x11b: c0f00100000000000000 |     iaddq 1, %rax
0x125:                      | testr11:
0x125: 62bb                 |     andq %r11, %r11
0x127: 40b60800000000000000 |     rmmovq %r11, 8(%rsi)
0x131: 718901000000000000   |     jle Done
0x13a: c0f00100000000000000 |     iaddq 1, %rax
0x144: 708901000000000000   |     jmp Done
                            | 
0x14d:                      | rest:
0x14d: c0f20100000000000000 |     iaddq 1, %rdx
0x157: 748901000000000000   |     jne Done
0x160: 50a70000000000000000 |     mrmovq (%rdi), %r10
0x16a: 62aa                 |     andq %r10, %r10
0x16c: 40a60000000000000000 |     rmmovq %r10, (%rsi)
0x176: 718901000000000000   |     jle Done
0x17f: c0f00100000000000000 |     iaddq 1, %rax
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x189:                      | Done:
0x189: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x18a:                      | End:
                            | #/* $end ncopy-ys */
0x18a:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x190:                      | 	.align 8
0x190:                      | src:
0x190: 0100000000000000     | 	.quad 1
0x198: feffffffffffffff     | 	.quad -2
0x1a0: 0300000000000000     | 	.quad 3
0x1a8: fcffffffffffffff     | 	.quad -4
0x1b0: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x1c0:                      | 	.align 16
0x1c0:                      | Predest:
0x1c0: fadebc0000000000     | 	.quad 0xbcdefa
0x1c8:                      | dest:
0x1c8: abefcd0000000000     | 	.quad 0xcdefab
0x1d0: abefcd0000000000     | 	.quad 0xcdefab
0x1d8: abefcd0000000000     | 	.quad 0xcdefab
0x1e0: abefcd0000000000     | 	.quad 0xcdefab
0x1e8:                      | Postdest:
0x1e8: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x1f0:                      | .align 8
                            | # Run time stack
0x1f0: 0000000000000000     | 	.quad 0
0x1f8: 0000000000000000     | 	.quad 0
0x200: 0000000000000000     | 	.quad 0
0x208: 0000000000000000     | 	.quad 0
0x210: 0000000000000000     | 	.quad 0
0x218: 0000000000000000     | 	.quad 0
0x220: 0000000000000000     | 	.quad 0
0x228: 0000000000000000     | 	.quad 0
0x230: 0000000000000000     | 	.quad 0
0x238: 0000000000000000     | 	.quad 0
0x240: 0000000000000000     | 	.quad 0
0x248: 0000000000000000     | 	.quad 0
0x250: 0000000000000000     | 	.quad 0
0x258: 0000000000000000     | 	.quad 0
0x260: 0000000000000000     | 	.quad 0
0x268: 0000000000000000     | 	.quad 0
                            | 
0x270:                      | Stack:
