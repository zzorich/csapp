                            | #######################################################################
                            | # Test for copying block of size 63;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f41806000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f23f00000000000000 | 	irmovq $63, %rdx		# src and dst have 63 elements
0x014: 30f69803000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f79001000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | # Loop header
0x032: 6300                 | 	xorq %rax,%rax		# count = 0;
0x034: c0f2feffffffffffffff |     iaddq $-2, %rdx
0x03e: 70e000000000000000   |     jmp test
0x047: 50a70000000000000000 | Loop:	mrmovq (%rdi), %r10	# read val from src...
0x051: 50b70800000000000000 |     mrmovq 8(%rdi), %r11
0x05b: 50c71000000000000000 |     mrmovq 16(%rdi), %r12
0x065: c0f71800000000000000 |     iaddq $24, %rdi
0x06f: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x071: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# ...and store it to dst
0x07b: 718e00000000000000   |     jle countAddTwo
0x084: c0f00100000000000000 |     iaddq $1, %rax
0x08e:                      | countAddTwo:
0x08e: 62bb                 |     andq %r11, %r11
0x090: 40b60800000000000000 | 	rmmovq %r11, 8(%rsi)	# ...and store it to dst
0x09a: 71ad00000000000000   |     jle countAddOne
0x0a3: c0f00100000000000000 |     iaddq $1, %rax
0x0ad:                      | countAddOne:
0x0ad: 62cc                 |     andq %r12, %r12
0x0af: 40c61000000000000000 |     rmmovq %r12, 16(%rsi)
0x0b9: 71cc00000000000000   |     jle countAddZero
0x0c2: c0f00100000000000000 |     iaddq $1, %rax
0x0cc:                      | countAddZero:
0x0cc: c0f61800000000000000 |     iaddq $24, %rsi
0x0d6: c0f2fdffffffffffffff |     iaddq $-3, %rdx
0x0e0:                      | test:
0x0e0: 764700000000000000   | 	jg Loop			# if so, goto Loop:
0x0e9: 744d01000000000000   |     jne rest 
0x0f2: 50a70000000000000000 |     mrmovq (%rdi), %r10
0x0fc: 50b70800000000000000 |     mrmovq 8(%rdi), %r11
0x106: 62aa                 |     andq %r10, %r10
0x108: 40a60000000000000000 |     rmmovq %r10, (%rsi)
0x112: 712501000000000000   |     jle testr11
0x11b: c0f00100000000000000 |     iaddq 1, %rax
0x125:                      | testr11:
0x125: 62bb                 |     andq %r11, %r11
0x127: 40b60800000000000000 |     rmmovq %r11, 8(%rsi)
0x131: 718901000000000000   |     jle Done
0x13a: c0f00100000000000000 |     iaddq 1, %rax
0x144: 708901000000000000   |     jmp Done
                            | 
0x14d:                      | rest:
0x14d: c0f20100000000000000 |     iaddq 1, %rdx
0x157: 748901000000000000   |     jne Done
0x160: 50a70000000000000000 |     mrmovq (%rdi), %r10
0x16a: 62aa                 |     andq %r10, %r10
0x16c: 40a60000000000000000 |     rmmovq %r10, (%rsi)
0x176: 718901000000000000   |     jle Done
0x17f: c0f00100000000000000 |     iaddq 1, %rax
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x189:                      | Done:
0x189: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x18a:                      | End:
                            | #/* $end ncopy-ys */
0x18a:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x190:                      | 	.align 8
0x190:                      | src:
0x190: ffffffffffffffff     | 	.quad -1
0x198: feffffffffffffff     | 	.quad -2
0x1a0: 0300000000000000     | 	.quad 3
0x1a8: 0400000000000000     | 	.quad 4
0x1b0: fbffffffffffffff     | 	.quad -5
0x1b8: faffffffffffffff     | 	.quad -6
0x1c0: f9ffffffffffffff     | 	.quad -7
0x1c8: f8ffffffffffffff     | 	.quad -8
0x1d0: 0900000000000000     | 	.quad 9
0x1d8: f6ffffffffffffff     | 	.quad -10
0x1e0: f5ffffffffffffff     | 	.quad -11
0x1e8: 0c00000000000000     | 	.quad 12
0x1f0: 0d00000000000000     | 	.quad 13
0x1f8: f2ffffffffffffff     | 	.quad -14
0x200: f1ffffffffffffff     | 	.quad -15
0x208: f0ffffffffffffff     | 	.quad -16
0x210: 1100000000000000     | 	.quad 17
0x218: eeffffffffffffff     | 	.quad -18
0x220: 1300000000000000     | 	.quad 19
0x228: ecffffffffffffff     | 	.quad -20
0x230: 1500000000000000     | 	.quad 21
0x238: eaffffffffffffff     | 	.quad -22
0x240: e9ffffffffffffff     | 	.quad -23
0x248: 1800000000000000     | 	.quad 24
0x250: 1900000000000000     | 	.quad 25
0x258: e6ffffffffffffff     | 	.quad -26
0x260: e5ffffffffffffff     | 	.quad -27
0x268: e4ffffffffffffff     | 	.quad -28
0x270: 1d00000000000000     | 	.quad 29
0x278: 1e00000000000000     | 	.quad 30
0x280: e1ffffffffffffff     | 	.quad -31
0x288: 2000000000000000     | 	.quad 32
0x290: 2100000000000000     | 	.quad 33
0x298: deffffffffffffff     | 	.quad -34
0x2a0: 2300000000000000     | 	.quad 35
0x2a8: dcffffffffffffff     | 	.quad -36
0x2b0: 2500000000000000     | 	.quad 37
0x2b8: daffffffffffffff     | 	.quad -38
0x2c0: d9ffffffffffffff     | 	.quad -39
0x2c8: d8ffffffffffffff     | 	.quad -40
0x2d0: 2900000000000000     | 	.quad 41
0x2d8: d6ffffffffffffff     | 	.quad -42
0x2e0: d5ffffffffffffff     | 	.quad -43
0x2e8: 2c00000000000000     | 	.quad 44
0x2f0: d3ffffffffffffff     | 	.quad -45
0x2f8: d2ffffffffffffff     | 	.quad -46
0x300: 2f00000000000000     | 	.quad 47
0x308: 3000000000000000     | 	.quad 48
0x310: cfffffffffffffff     | 	.quad -49
0x318: 3200000000000000     | 	.quad 50
0x320: cdffffffffffffff     | 	.quad -51
0x328: 3400000000000000     | 	.quad 52
0x330: 3500000000000000     | 	.quad 53
0x338: 3600000000000000     | 	.quad 54
0x340: 3700000000000000     | 	.quad 55
0x348: c8ffffffffffffff     | 	.quad -56
0x350: c7ffffffffffffff     | 	.quad -57
0x358: 3a00000000000000     | 	.quad 58
0x360: 3b00000000000000     | 	.quad 59
0x368: 3c00000000000000     | 	.quad 60
0x370: 3d00000000000000     | 	.quad 61
0x378: 3e00000000000000     | 	.quad 62
0x380: 3f00000000000000     | 	.quad 63
0x388: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x390:                      | 	.align 16
0x390:                      | Predest:
0x390: fadebc0000000000     | 	.quad 0xbcdefa
0x398:                      | dest:
0x398: abefcd0000000000     | 	.quad 0xcdefab
0x3a0: abefcd0000000000     | 	.quad 0xcdefab
0x3a8: abefcd0000000000     | 	.quad 0xcdefab
0x3b0: abefcd0000000000     | 	.quad 0xcdefab
0x3b8: abefcd0000000000     | 	.quad 0xcdefab
0x3c0: abefcd0000000000     | 	.quad 0xcdefab
0x3c8: abefcd0000000000     | 	.quad 0xcdefab
0x3d0: abefcd0000000000     | 	.quad 0xcdefab
0x3d8: abefcd0000000000     | 	.quad 0xcdefab
0x3e0: abefcd0000000000     | 	.quad 0xcdefab
0x3e8: abefcd0000000000     | 	.quad 0xcdefab
0x3f0: abefcd0000000000     | 	.quad 0xcdefab
0x3f8: abefcd0000000000     | 	.quad 0xcdefab
0x400: abefcd0000000000     | 	.quad 0xcdefab
0x408: abefcd0000000000     | 	.quad 0xcdefab
0x410: abefcd0000000000     | 	.quad 0xcdefab
0x418: abefcd0000000000     | 	.quad 0xcdefab
0x420: abefcd0000000000     | 	.quad 0xcdefab
0x428: abefcd0000000000     | 	.quad 0xcdefab
0x430: abefcd0000000000     | 	.quad 0xcdefab
0x438: abefcd0000000000     | 	.quad 0xcdefab
0x440: abefcd0000000000     | 	.quad 0xcdefab
0x448: abefcd0000000000     | 	.quad 0xcdefab
0x450: abefcd0000000000     | 	.quad 0xcdefab
0x458: abefcd0000000000     | 	.quad 0xcdefab
0x460: abefcd0000000000     | 	.quad 0xcdefab
0x468: abefcd0000000000     | 	.quad 0xcdefab
0x470: abefcd0000000000     | 	.quad 0xcdefab
0x478: abefcd0000000000     | 	.quad 0xcdefab
0x480: abefcd0000000000     | 	.quad 0xcdefab
0x488: abefcd0000000000     | 	.quad 0xcdefab
0x490: abefcd0000000000     | 	.quad 0xcdefab
0x498: abefcd0000000000     | 	.quad 0xcdefab
0x4a0: abefcd0000000000     | 	.quad 0xcdefab
0x4a8: abefcd0000000000     | 	.quad 0xcdefab
0x4b0: abefcd0000000000     | 	.quad 0xcdefab
0x4b8: abefcd0000000000     | 	.quad 0xcdefab
0x4c0: abefcd0000000000     | 	.quad 0xcdefab
0x4c8: abefcd0000000000     | 	.quad 0xcdefab
0x4d0: abefcd0000000000     | 	.quad 0xcdefab
0x4d8: abefcd0000000000     | 	.quad 0xcdefab
0x4e0: abefcd0000000000     | 	.quad 0xcdefab
0x4e8: abefcd0000000000     | 	.quad 0xcdefab
0x4f0: abefcd0000000000     | 	.quad 0xcdefab
0x4f8: abefcd0000000000     | 	.quad 0xcdefab
0x500: abefcd0000000000     | 	.quad 0xcdefab
0x508: abefcd0000000000     | 	.quad 0xcdefab
0x510: abefcd0000000000     | 	.quad 0xcdefab
0x518: abefcd0000000000     | 	.quad 0xcdefab
0x520: abefcd0000000000     | 	.quad 0xcdefab
0x528: abefcd0000000000     | 	.quad 0xcdefab
0x530: abefcd0000000000     | 	.quad 0xcdefab
0x538: abefcd0000000000     | 	.quad 0xcdefab
0x540: abefcd0000000000     | 	.quad 0xcdefab
0x548: abefcd0000000000     | 	.quad 0xcdefab
0x550: abefcd0000000000     | 	.quad 0xcdefab
0x558: abefcd0000000000     | 	.quad 0xcdefab
0x560: abefcd0000000000     | 	.quad 0xcdefab
0x568: abefcd0000000000     | 	.quad 0xcdefab
0x570: abefcd0000000000     | 	.quad 0xcdefab
0x578: abefcd0000000000     | 	.quad 0xcdefab
0x580: abefcd0000000000     | 	.quad 0xcdefab
0x588: abefcd0000000000     | 	.quad 0xcdefab
0x590:                      | Postdest:
0x590: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x598:                      | .align 8
                            | # Run time stack
0x598: 0000000000000000     | 	.quad 0
0x5a0: 0000000000000000     | 	.quad 0
0x5a8: 0000000000000000     | 	.quad 0
0x5b0: 0000000000000000     | 	.quad 0
0x5b8: 0000000000000000     | 	.quad 0
0x5c0: 0000000000000000     | 	.quad 0
0x5c8: 0000000000000000     | 	.quad 0
0x5d0: 0000000000000000     | 	.quad 0
0x5d8: 0000000000000000     | 	.quad 0
0x5e0: 0000000000000000     | 	.quad 0
0x5e8: 0000000000000000     | 	.quad 0
0x5f0: 0000000000000000     | 	.quad 0
0x5f8: 0000000000000000     | 	.quad 0
0x600: 0000000000000000     | 	.quad 0
0x608: 0000000000000000     | 	.quad 0
0x610: 0000000000000000     | 	.quad 0
                            | 
0x618:                      | Stack:
