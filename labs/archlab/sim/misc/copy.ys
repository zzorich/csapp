# Execution begins at address 0
    .pos 0
    irmovq stack, %rsp
    call main
    halt

.align 8
# Source block
src:
        .quad 0x00a
        .quad 0x0b0
        .quad 0xc00
# Destination block
dest:
        .quad 0x111
        .quad 0x222
        .quad 0x333



main:
    irmovq src, %rdi
    irmovq dest, %rsi
    irmovq $3, %rdx
    call copy_block
    ret

copy_block:
    xorq %rax, %rax
    andq %rdx, %rdx
    jmp test
loop:
    irmovq $8, %r8
    irmovq $-1, %r9
    mrmovq (%rdi), %rcx  # val = *src
    addq %r8, %rdi       # src ++
    rmmovq %rcx, (%rsi)   # *dest = val
    addq %r8, %rsi       # dest ++
    xorq %rcx, %rax      # result ^= val
    addq %r9, %rdx       # len--
test:
    jg loop
    ret

# Stack starts here and grows to lower addresses
    .pos 0x200
stack:
